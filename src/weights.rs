
//! Autogenerated weights for `pallet_dex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-03, STEPS: `20`, REPEAT: `100`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `vale`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_dex
// --extrinsic
// *
// --steps
// 20
// --repeat
// 100
// --output
// /home/vale/Desktop/Parity/substrate-dex/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_dex`.
/// /// Weight functions for `pallet_dex`.
pub trait WeightInfo {
	fn create_exchange() -> Weight;
	fn add_liquidity() -> Weight;
	fn remove_liquidity() -> Weight;
	fn currency_to_asset() -> Weight;
	fn asset_to_currency() -> Weight;
	fn asset_to_asset() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Dex Exchanges (r:1 w:1)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:3 w:3)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn create_exchange() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393`
		//  Estimated: `22191`
		// Minimum execution time: 42_623_000 picoseconds.
		Weight::from_parts(44_767_000, 0)
			.saturating_add(Weight::from_parts(0, 22191))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:3 w:3)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: Dex Exchanges (r:1 w:1)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `969`
		//  Estimated: `22191`
		// Minimum execution time: 43_479_000 picoseconds.
		Weight::from_parts(44_849_000, 0)
			.saturating_add(Weight::from_parts(0, 22191))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Dex Exchanges (r:1 w:1)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:3 w:3)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `969`
		//  Estimated: `22191`
		// Minimum execution time: 45_185_000 picoseconds.
		Weight::from_parts(46_722_000, 0)
			.saturating_add(Weight::from_parts(0, 22191))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Dex Exchanges (r:1 w:1)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn currency_to_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726`
		//  Estimated: `16929`
		// Minimum execution time: 33_373_000 picoseconds.
		Weight::from_parts(35_256_000, 0)
			.saturating_add(Weight::from_parts(0, 16929))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Dex Exchanges (r:1 w:1)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn asset_to_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726`
		//  Estimated: `16929`
		// Minimum execution time: 33_634_000 picoseconds.
		Weight::from_parts(38_909_000, 0)
			.saturating_add(Weight::from_parts(0, 16929))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Dex Exchanges (r:2 w:2)
	/// Proof: Dex Exchanges (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:4 w:4)
	/// Proof: Assets Account (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn asset_to_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1146`
		//  Estimated: `23702`
		// Minimum execution time: 47_731_000 picoseconds.
		Weight::from_parts(49_006_000, 0)
			.saturating_add(Weight::from_parts(0, 23702))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
}
